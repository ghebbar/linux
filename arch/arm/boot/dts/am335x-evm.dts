/*
 * Copyright (C) 2012 Texas Instruments Incorporated - http://www.ti.com/
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
/dts-v1/;

/include/ "am33xx.dtsi"

/ {
	model = "TI AM335x EVM";
	compatible = "ti,am335x-evm", "ti,am33xx";

	cpus {
		cpu@0 {
			cpu0-supply = <&vdd1_reg>;
		};
	};

	memory {
		device_type = "memory";
		reg = <0x80000000 0x10000000>; /* 256 MB */
	};

	am33xx_pinmux: pinmux@44e10800 {
		pinctrl-names = "default", "sleep";
		pinctrl-0 = <>;
		pinctrl-1 = <&nand_sleep_pins &lcd_sleep_pins
				&mmc2_wl12xx_sleep_pins &mcasp1_sleep_pins
				&mmc0_sleep_pins &ecap0_sleep_pins
				&uart1_wl12xx_sleep_pins &wl12xx_sleep_pins
				&general_sleep_pins>;

		matrix_keypad_s0: matrix_keypad_s0 {
			pinctrl-single,pins = <
				0x54 0x7	/* gpmc_a5.gpio1_21, OUTPUT | MODE7 */
				0x58 0x7	/* gpmc_a6.gpio1_22, OUTPUT | MODE7 */
				0x64 0x27	/* gpmc_a9.gpio1_25, INPUT | MODE7 */
				0x68 0x27	/* gpmc_a10.gpio1_26, INPUT | MODE7 */
				0x6c 0x27	/* gpmc_a11.gpio1_27, INPUT | MODE7 */
			>;
		};

		matrix_keypad_sleep_s1: matrix_keypad_sleep_s1 {
			pinctrl-single,pins = <
				0x54 0x27
				0x58 0x27
			>;
		};

		volume_keys_s0: volume_keys_s0 {
			pinctrl-single,pins = <
				0x150 0x27	/* spi0_sclk.gpio0_2, INPUT | MODE7 */
				0x154 0x27	/* spi0_d0.gpio0_3, INPUT | MODE7 */
			>;
		};

		cpsw_s0: cpsw_s0 {
			pinctrl-single,pins = <
				/* Slave 1 */
				0x114 0x2	/* mii1_txen.rgmii1_tctl, MODE2 | OUTPUT */
				0x118 0x22	/* mii1_rxdv.rgmii1_rctl, MODE2 | INPUT_PULLDOWN */
				0x11c 0x2	/* mii1_txd3.rgmii1_td3, MODE2 | OUTPUT */
				0x120 0x2	/* mii1_txd2.rgmii1_td2, MODE2 | OUTPUT */
				0x124 0x2	/* mii1_txd1.rgmii1_td1, MODE2 | OUTPUT */
				0x128 0x2	/* mii1_txd0.rgmii1_td0, MODE2 | OUTPUT */
				0x12c 0x2	/* mii1_txclk.rgmii1_tclk, MODE2 | OUTPUT */
				0x130 0x22	/* mii1_rxclk.rgmii1_rclk, MODE2 | INPUT_PULLDOWN */
				0x134 0x22	/* mii1_rxd3.rgmii1_rd3, MODE2 | INPUT_PULLDOWN */
				0x138 0x22	/* mii1_rxd2.rgmii1_rd2, MODE2 | INPUT_PULLDOWN */
				0x13c 0x22	/* mii1_rxd1.rgmii1_rd1, MODE2 | INPUT_PULLDOWN */
				0x140 0x22	/* mii1_rxd0.rgmii1_rd0, MODE2 | INPUT_PULLDOWN */

				/* MDIO */
				0x148 0x30	/* mdio_data.mdio_data, MODE0 | INPUT_PULLUP */
				0x14c 0x10	/* mdio_clk.mdio_clk, MODE0 | OUTPUT_PULLUP */
			>;
		};

		cpsw_sleep_s1: cpsw_sleep_s1 {
			pinctrl-single,pins = <
				/* Slave 1 */
				0x114 0x27
				0x118 0x27
				0x11c 0x27
				0x120 0x27
				0x124 0x27
				0x128 0x27
				0x12c 0x27
				0x130 0x27
				0x134 0x27
				0x138 0x27
				0x13c 0x27
				0x140 0x27

				/* MDIO */
				0x148 0x27
				0x14c 0x0f
			>;
		};

		i2c0_pins: pinmux_i2c0_pins {
			pinctrl-single,pins = <
				0x188 0x30	/* i2c0_sda.i2c0_sda PULLUP | INPUTENABLE | MODE0 */
				0x18c 0x30	/* i2c0_scl.i2c0_scl PULLUP | INPUTENABLE | MODE0 */
			>;
		};

		i2c1_pins: pinmux_i2c1_pins {
			pinctrl-single,pins = <
				0x158 0x32	/* spi0_d1.i2c1_sda PULLUP | INPUTENABLE | MODE2 */
				0x15c 0x32	/* spi0_cs0.i2c1_scl PULLUP | INPUTENABLE | MODE2 */
			>;
		};

		i2c1_sleep_pins: pinmux_i2c1_sleep_pins {
			pinctrl-single,pins = <
				0x158 0x27	/* spi0_d1.i2c1_sda PULLUP | INPUTENABLE | MODE2 */
				0x15c 0x27	/* spi0_cs0.i2c1_scl PULLUP | INPUTENABLE | MODE2 */
			>;
		};

		uart0_pins: pinmux_uart0_pins {
			pinctrl-single,pins = <
				0x170 0x30	/* uart0_rxd.uart0_rxd PULLUP | INPUTENABLE | MODE0 */
				0x174 0x00	/* uart0_txd.uart0_txd PULLDOWN | MODE0 */
			>;
		};

		nand_sleep_pins: nand_sleep_pins {
			pinctrl-single,pins = <
				0x00 0x27
				0x04 0x27
				0x08 0x27
				0x0C 0x27
				0x10 0x27
				0x14 0x27
				0x18 0x27
				0x1C 0x27
				0x70 0x27
				0x74 0x27
				0x7C 0x27
				0x90 0x27
				0x94 0x27
				0x98 0x27
				0x9C 0x27
			>;
		};

		lcd_sleep_pins: lcd_sleep_pins {
			pinctrl-single,pins = <
				0x20 0x27
				0x24 0x27
				0x28 0x27
				0x2C 0x27
				0x30 0x27
				0x34 0x27
				0x38 0x27
				0x3C 0x27
				0xA0 0x0f
				0xA4 0x27
				0xA8 0x27
				0xAC 0x27
				0xB0 0x27
				0xB4 0x27
				0xB8 0x27
				0xBC 0x27
				0xC0 0x27
				0xC4 0x27
				0xC8 0x27
				0xCC 0x27
				0xD0 0x27
				0xD4 0x27
				0xD8 0x0f
				0xDC 0x27
				0xE0 0x27
				0xE4 0x27
				0xE8 0x27
				0xEC 0x27
			>;
		};

		mcasp1_sleep_pins: mcasp1_sleep_pins {
			pinctrl-single,pins = <
				0x108 0x27
				0x10C 0x27
				0x110 0x27
				0x144 0x0f
			>;
		};

		mmc0_sleep_pins: mmc0_sleep_pins {
			pinctrl-single,pins = <
				0x0F0 0x27
				0x0F4 0x27
				0x0F8 0x27
				0x0FC 0x27
				0x100 0x27
				0x104 0x27
				0x1A0 0x27
				0x160 0x27
			>;
		};


		ecap0_sleep_pins: ecap0_sleep_pins {
			pinctrl-single,pins = <
				0x164 0x27
			>;
		};


		mmc2_wl12xx_sleep_pins: mmc2_wl12xx_sleep_pins {
			pinctrl-single,pins = <
				0x44 0x27
				0x48 0x27
				0x4C 0x27
				0x78 0x27
				0x88 0x27
				0x8C 0x27
			>;
		};

		uart1_wl12xx_sleep_pins: uart1_wl12xx_sleep_pins {
			pinctrl-single,pins = <
				0x178 0x27
				0x17C 0x27
				0x180 0x27
				0x184 0x27
			>;
		};


		wl12xx_sleep_pins: wl12xx_sleep_pins {
			pinctrl-single,pins = <
				0x040 0x27
				0x19C 0x27
				0x1AC 0x27
			>;
		};


		usb0_sleep_pins: usb0_sleep_pins {
			pinctrl-single,pins = <
				0x21C 0x27
			>;
		};


		usb1_sleep_pins:usb1_sleep_pins {
			pinctrl-single,pins = <
				0x234 0x27
			>;
		};


		general_sleep_pins: general_sleep_pins {
			pinctrl-single,pins = <
				0x050 0x27	/* gpmc_a4 */
				0x1A8 0x27	/* mcasp0_axr1 */
				0x1B0 0x27	/* xdma_event_intr0 */
				0x1B4 0x27	/* xdma_event_intr1 */
				0x1E4 0x27	/* emu0 */
				0x1E8 0x27	/* emu1 */
			>;
		};

	};

	ocp {
		uart0: serial@44e09000 {
			pinctrl-names = "default";
			pinctrl-0 = <&uart0_pins>;

			status = "okay";
		};

		i2c0: i2c@44e0b000 {
			status = "okay";
			clock-frequency = <400000>;
			pinctrl-names = "default";
			pinctrl-0 = <&i2c0_pins>;

			tps: tps@2d {
				reg = <0x2d>;
			};
		};

		i2c1: i2c@4802a000 {
			status = "okay";
			clock-frequency = <100000>;
			pinctrl-names = "default", "sleep";
			pinctrl-0 = <&i2c1_pins>;
			pinctrl-1 = <&i2c1_sleep_pins>;

			lis331dlh: lis331dlh@18 {
				compatible = "st,lis331dlh", "st,lis3lv02d";
				reg = <0x18>;
				Vdd-supply = <&lis3_reg>;
				Vdd_IO-supply = <&lis3_reg>;

				st,click-single-x;
				st,click-single-y;
				st,click-single-z;
				st,click-thresh-x = <10>;
				st,click-thresh-y = <10>;
				st,click-thresh-z = <10>;
				st,irq1-click;
				st,irq2-click;
				st,wakeup-x-lo;
				st,wakeup-x-hi;
				st,wakeup-y-lo;
				st,wakeup-y-hi;
				st,wakeup-z-lo;
				st,wakeup-z-hi;
				st,min-limit-x = <120>;
				st,min-limit-y = <120>;
				st,min-limit-z = <140>;
				st,max-limit-x = <550>;
				st,max-limit-y = <550>;
				st,max-limit-z = <750>;
			};

			tsl2550: tsl2550@39 {
				compatible = "taos,tsl2550";
				reg = <0x39>;
			};

			tmp275: tmp275@48 {
				compatible = "ti,tmp275";
				reg = <0x48>;
			};
		};
	};

	vbat: fixedregulator@0 {
		compatible = "regulator-fixed";
		regulator-name = "vbat";
		regulator-min-microvolt = <5000000>;
		regulator-max-microvolt = <5000000>;
		regulator-boot-on;
	};

	lis3_reg: fixedregulator@1 {
		compatible = "regulator-fixed";
		regulator-name = "lis3_reg";
		regulator-boot-on;
	};

	matrix_keypad: matrix_keypad@0 {
		compatible = "gpio-matrix-keypad";
		debounce-delay-ms = <5>;
		col-scan-delay-us = <2>;
		pinctrl-names = "default", "sleep";
		pinctrl-0 = <&matrix_keypad_s0>;
		pinctrl-1 = <&matrix_keypad_sleep_s1>;

		row-gpios = <&gpio2 25 0	/* Bank1, pin25 */
			     &gpio2 26 0	/* Bank1, pin26 */
			     &gpio2 27 0>;	/* Bank1, pin27 */

		col-gpios = <&gpio2 21 0	/* Bank1, pin21 */
			     &gpio2 22 0>;	/* Bank1, pin22 */

		linux,keymap = <0x0000008b	/* MENU */
				0x0100009e	/* BACK */
				0x02000069	/* LEFT */
				0x0001006a	/* RIGHT */
				0x0101001c	/* ENTER */
				0x0201006c>;	/* DOWN */
	};

	gpio_keys: volume_keys@0 {
		compatible = "gpio-keys";
		#address-cells = <1>;
		#size-cells = <0>;
		autorepeat;
		pinctrl-names = "default";
		pinctrl-0 = <&volume_keys_s0>;


		switch@9 {
			label = "volume-up";
			linux,code = <115>;
			gpios = <&gpio1 2 1>;
			gpio-key,wakeup;
		};

		switch@10 {
			label = "volume-down";
			linux,code = <114>;
			gpios = <&gpio1 3 1>;
			gpio-key,wakeup;
		};
	};

	usb@47400000 {
		pinctrl-names = "sleep";
		pinctrl-1 = <&usb0_sleep_pins &usb1_sleep_pins>;
	};

};

/include/ "tps65910.dtsi"

&tps {
	vcc1-supply = <&vbat>;
	vcc2-supply = <&vbat>;
	vcc3-supply = <&vbat>;
	vcc4-supply = <&vbat>;
	vcc5-supply = <&vbat>;
	vcc6-supply = <&vbat>;
	vcc7-supply = <&vbat>;
	vccio-supply = <&vbat>;

	regulators {
		vrtc_reg: regulator@0 {
			regulator-always-on;
		};

		vio_reg: regulator@1 {
			regulator-always-on;
		};

		vdd1_reg: regulator@2 {
			/* VDD_MPU voltage limits 0.95V - 1.26V with +/-4% tolerance */
			regulator-name = "vdd_mpu";
			regulator-min-microvolt = <912500>;
			regulator-max-microvolt = <1312500>;
			regulator-boot-on;
			regulator-always-on;
		};

		vdd2_reg: regulator@3 {
			/* VDD_CORE voltage limits 0.95V - 1.1V with +/-4% tolerance */
			regulator-name = "vdd_core";
			regulator-min-microvolt = <912500>;
			regulator-max-microvolt = <1150000>;
			regulator-boot-on;
			regulator-always-on;
		};

		vdd3_reg: regulator@4 {
			regulator-always-on;
		};

		vdig1_reg: regulator@5 {
			regulator-always-on;
		};

		vdig2_reg: regulator@6 {
			regulator-always-on;
		};

		vpll_reg: regulator@7 {
			regulator-always-on;
		};

		vdac_reg: regulator@8 {
			regulator-always-on;
		};

		vaux1_reg: regulator@9 {
			regulator-always-on;
		};

		vaux2_reg: regulator@10 {
			regulator-always-on;
		};

		vaux33_reg: regulator@11 {
			regulator-always-on;
		};

		vmmc_reg: regulator@12 {
			regulator-always-on;
		};
	};
};


&mac {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&cpsw_s0>;
	pinctrl-1 = <&cpsw_sleep_s1>;
};

&cpsw_emac0 {
	phy_id = <&davinci_mdio>, <0>;
};

&cpsw_emac1 {
	phy_id = <&davinci_mdio>, <1>;
};
